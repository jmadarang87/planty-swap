{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Logo from \"../../../assets/images/PlantySwap_Logo.png\";\nimport CustomInput from \"../../components/CustomInput\";\nimport CustomButton from \"../../components/CustomButton\";\nimport { useNavigation } from '@react-navigation/native';\nimport { useForm, Controller } from 'react-hook-form';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ConfirmEmailScreen = function ConfirmEmailScreen() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      confirmationCode = _useState4[0],\n      setConfirmationCode = _useState4[1];\n\n  var _useForm = useForm(),\n      control = _useForm.control,\n      handleSubmit = _useForm.handleSubmit,\n      errors = _useForm.formState.errors;\n\n  var _useWindowDimensions = useWindowDimensions(),\n      height = _useWindowDimensions.height;\n\n  var navigation = useNavigation();\n\n  var onConfirmPressed = function onConfirmPressed() {\n    console.warn('Email Confirmed');\n  };\n\n  var onResendCodePressed = function onResendCodePressed() {\n    console.warn('Code Resent');\n  };\n\n  var onSignInPressed = function onSignInPressed() {\n    console.warn('Sign In');\n    navigation.navigate('SignIn');\n  };\n\n  return _jsx(ScrollView, {\n    children: _jsxs(View, {\n      style: styles.root,\n      children: [_jsx(Image, {\n        source: Logo,\n        style: [styles.logo, {\n          height: height * 0.2\n        }],\n        resizeMode: \"contain\"\n      }), _jsx(Text, {\n        style: styles.title,\n        children: \"Confirm Your Email\"\n      }), _jsx(Text, {\n        style: styles.label,\n        children: \"Email\"\n      }), _jsx(CustomInput, {\n        name: \"email\",\n        placeholder: \"Email\",\n        control: control,\n        rules: {\n          required: 'Email is required.',\n          pattern: {\n            value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            message: 'Please enter a valid email'\n          }\n        }\n      }), _jsx(Text, {\n        style: styles.label,\n        children: \"Confirmation Code*\"\n      }), _jsx(CustomInput, {\n        name: \"username\",\n        placeholder: \"Username\",\n        control: control,\n        rules: {\n          required: 'Username is required.'\n        }\n      }), _jsx(CustomButton, {\n        text: \"Confirm\",\n        type: \"PRIMARY\",\n        onPress: onConfirmPressed\n      }), _jsx(CustomButton, {\n        text: \"Resend Code\",\n        type: \"SECONDARY\",\n        onPress: onResendCodePressed\n      }), _jsx(CustomButton, {\n        text: \"Please Sign In / Sign Up\",\n        type: 'TERTIARY',\n        onPress: handleSubmit(onSignInPressed)\n      })]\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  root: {\n    alignItems: 'center',\n    padding: 35,\n    justifyContent: 'center',\n    height: '100%'\n  },\n  logo: {\n    width: '100%',\n    maxWidth: 1000\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#051C60',\n    margin: 10\n  },\n  label: {\n    width: '100%',\n    alignItems: 'left'\n  }\n});\nexport default ConfirmEmailScreen;","map":{"version":3,"names":["React","useState","Logo","CustomInput","CustomButton","useNavigation","useForm","Controller","ConfirmEmailScreen","email","setEmail","confirmationCode","setConfirmationCode","control","handleSubmit","errors","formState","useWindowDimensions","height","navigation","onConfirmPressed","console","warn","onResendCodePressed","onSignInPressed","navigate","styles","root","logo","title","label","required","pattern","value","message","StyleSheet","create","alignItems","padding","justifyContent","width","maxWidth","fontSize","fontWeight","color","margin"],"sources":["/Users/jahnelmadarang/Dev/react-native/planty-swap/src/screens/ConfirmEmailScreen/ConfirmEmailScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n\tView,\n\tText,\n\tStyleSheet,\n\tImage,\n\tuseWindowDimensions,\n\tScrollView,\n} from 'react-native';\nimport Logo from '../../../assets/images/PlantySwap_Logo.png';\nimport CustomInput from '../../components/CustomInput';\nimport CustomButton from '../../components/CustomButton';\nimport { useNavigation } from '@react-navigation/native';\nimport { useForm, Controller } from 'react-hook-form';\n\nconst ConfirmEmailScreen = () => {\n\tconst [email, setEmail] = useState('');\n\tconst [confirmationCode, setConfirmationCode] = useState('');\n\n\tconst {\n\t\tcontrol,\n\t\thandleSubmit,\n\t\tformState: { errors },\n\t} = useForm();\n\n\tconst { height } = useWindowDimensions();\n\n\tconst navigation = useNavigation();\n\n\tconst onConfirmPressed = () => {\n\t\tconsole.warn('Email Confirmed');\n\t};\n\n\tconst onResendCodePressed = () => {\n\t\tconsole.warn('Code Resent');\n\t};\n\n\tconst onSignInPressed = () => {\n\t\tconsole.warn('Sign In');\n\t\tnavigation.navigate('SignIn');\n\t};\n\n\treturn (\n\t\t<ScrollView>\n\t\t\t<View style={styles.root}>\n\t\t\t\t<Image\n\t\t\t\t\tsource={Logo}\n\t\t\t\t\tstyle={[styles.logo, { height: height * 0.2 }]}\n\t\t\t\t\tresizeMode='contain'\n\t\t\t\t/>\n\t\t\t\t<Text style={styles.title}>Confirm Your Email</Text>\n\n\t\t\t\t<Text style={styles.label}>Email</Text>\n\n\t\t\t\t<CustomInput\n\t\t\t\t\tname='email'\n\t\t\t\t\tplaceholder='Email'\n\t\t\t\t\tcontrol={control}\n\t\t\t\t\trules={{\n\t\t\t\t\t\trequired: 'Email is required.',\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\tvalue: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n\t\t\t\t\t\t\tmessage: 'Please enter a valid email',\n\t\t\t\t\t\t},\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<Text style={styles.label}>Confirmation Code*</Text>\n\n\t\t\t\t<CustomInput\n\t\t\t\t\tname='username'\n\t\t\t\t\tplaceholder='Username'\n\t\t\t\t\tcontrol={control}\n\t\t\t\t\trules={{ required: 'Username is required.' }}\n\t\t\t\t/>\n\t\t\t\t<CustomButton\n\t\t\t\t\ttext='Confirm'\n\t\t\t\t\ttype='PRIMARY'\n\t\t\t\t\tonPress={onConfirmPressed}\n\t\t\t\t/>\n\t\t\t\t<CustomButton\n\t\t\t\t\ttext='Resend Code'\n\t\t\t\t\ttype='SECONDARY'\n\t\t\t\t\tonPress={onResendCodePressed}\n\t\t\t\t/>\n\t\t\t\t<CustomButton\n\t\t\t\t\ttext='Please Sign In / Sign Up'\n\t\t\t\t\ttype={'TERTIARY'}\n\t\t\t\t\tonPress={handleSubmit(onSignInPressed)}\n\t\t\t\t/>\n\t\t\t</View>\n\t\t</ScrollView>\n\t);\n};\n\nconst styles = StyleSheet.create({\n\troot: {\n\t\talignItems: 'center',\n\t\tpadding: 35,\n\t\tjustifyContent: 'center',\n\t\theight: '100%',\n\t},\n\tlogo: {\n\t\twidth: '100%',\n\t\tmaxWidth: 1000,\n\t},\n\ttitle: {\n\t\tfontSize: 24,\n\t\tfontWeight: 'bold',\n\t\tcolor: '#051C60',\n\t\tmargin: 10,\n\t},\n\tlabel: {\n\t\twidth: '100%',\n\t\talignItems: 'left',\n\t},\n});\n\nexport default ConfirmEmailScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}